# shellcheck shell=bash
# ~/.shellrc - for common *sh settings

# enable colour support of ls and add handy aliases
if command -v dircolors >/dev/null; then
    eval "$(dircolors -b)"

    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias rgrep='rgrep --color=auto'
fi

alias ll='ls -l'
alias lh='ls -lh'
alias la='ls -A'
alias lt='ls -lt'
alias l='ls -CF'

# don't shadow macos /usr/bin/log
alias plog='vim ~/doc/log'
alias logp='plog'
alias todo='vim ~/TODO'
alias todos='grep -c "^- " ~/TODO'
alias tasks='find ~/doc/tasks -type f | wc -l'
alias wlog='vim ~/work/org/log'
alias logw=wlog
alias wtodo='vim ~/work/org/todo'
alias todow='wtodo'
alias stonks='~/src/go/src/github.com/acx0/stocks/run.sh'
alias s='stonks'
alias sg='stonks -g'
sgl() {
    stonks -g "$@" | less
}
sl() {
    stonks "$@" | less
}
alias sgla='sgl -a'
alias ml='left'
alias mla='left -a'
alias dl='dleft'

alias vi='vim -u NONE'
alias vimupdate="vim +PlugUpdate"

alias g='git'
alias c='cargo'

py() {
    for pybin in ipython3 ipython python3 python; do
        if command -v $pybin >/dev/null; then
            $pybin
            return
        fi
    done
    echo >&2 "error: none found"
}

alias io='sudo iotop -o'
alias fa='sudo fatrace -t'
alias mtr='mtr --curses'
alias dfn='findmnt -D'
alias ip='ip -brief -color'
alias sc='systemctl'
alias dmsg='sudo dmesg --follow --human'
alias npg='noping -g histogram'

alias mounted='mount | grep "/dev/\(sd[b-z]\|mapper\)"'
alias ppath='echo $PATH | tr : "\n"'

alias etlog='sudo etckeeper vcs log'
alias update='sudo aptitude update && sudo aptitude safe-upgrade'
alias rmad='rmadison'
alias ain='sudo aptitude install'
alias are='sudo aptitude remove'
alias apu='sudo aptitude purge'
alias auc='sudo aptitude autoclean'
alias ase='aptitude search'
alias ash='aptitude show'
alias ay='aptitude why'
alias afl='apt-file list'
alias aff='apt-file find'
alias dep='apt-rdepends'
alias rdep='apt-rdepends -r'
depd() {
    if [[ -z $* ]]; then
        echo >&2 "args: <apt-rdepends-args>"
        return 1
    fi
    dot -Txlib <(apt-rdepends -d "$@")
}
alias rdepd='depd -r'

# note: -a == -rlptgoD
alias rs='rsync -av --progress'
alias rschk='rsync --dry-run -av --delete'
alias rschk-itemize='rsync --dry-run -av --delete --itemize-changes'
# note: default `--out-format` will output `*deleting` prefix for each item being removed (if remote rsync is recent)
rschk-content-only() {
    if [[ -z $* ]]; then
        echo >&2 "args: <rsync-args>"
        return 1
    fi
    rsync --dry-run -rltDvO --delete --itemize-changes "$@" \
        | grep -e '^\*' -e '^.f[\.c][\.s]'
}
rschk-content-checksum() {
    if [[ -z $* ]]; then
        echo >&2 "args: <rsync-args>"
        return 1
    fi
    rschk-content-only --checksum "$@"
}

alias m='make -j $(nproc)'
alias d='docker'
alias dc='docker-compose'

# list processes which are using a deleted map file after a system update
alias dm="sudo lsof +c 15 | grep 'DEL.*lib' | cut -d ' ' -f 1 | sort -u"

alias fm='ranger'
alias f='ranger_cd'
ranger_cd() {
    local cd_file="$HOME/.config/ranger/shell_cd"
    ranger --choosedir "$cd_file" "${@:-$PWD}"   # use supplied arg otherwise $PWD if none
    local chosen_dir
    chosen_dir="$(<"$cd_file")" || return 1
    if [[ -n $chosen_dir ]] && [[ $chosen_dir != "$PWD" ]]; then
        cd -- "$chosen_dir"
    fi
    rm -f -- "$cd_file"
}

# enable colours in less for man pages
man() {
    LESS_TERMCAP_mb=$'\E[01;31m' \
        LESS_TERMCAP_md=$'\E[01;36m' \
        LESS_TERMCAP_me=$'\E[0m' \
        LESS_TERMCAP_se=$'\E[0m' \
        LESS_TERMCAP_so=$'\E[01;40;92m' \
        LESS_TERMCAP_ue=$'\E[0m' \
        LESS_TERMCAP_us=$'\E[01;32m' \
        command man "$@"
}

alias ytdl-audio-only='yt-dlp -x --audio-quality 320K --audio-format mp3'

strace-output() {
    if [[ -z $* ]]; then
        echo >&2 "args: <cmd> [<cmd-args>]"
        return 1
    fi

    mkdir -p /tmp/strace-output
    strace \
        -fo $(mktemp -u /tmp/strace-output/XXXXXXXX-$(basename $1)) \
        "$@"
}

strace-output-verbose() {
    if [[ -z $* ]]; then
        echo >&2 "args: <cmd> [<cmd-args>]"
        return 1
    fi

    mkdir -p /tmp/strace-output
    strace \
        --no-abbrev \
        --string-limit 1024 \
        -fo $(mktemp -u /tmp/strace-output/XXXXXXXX-$(basename $1)) \
        "$@"
}

alias venvc-pyenv='python -m venv'
alias venvc='python3 -m venv'
alias venvd='deactivate'
venvu() {
    local venv_dir="$1"
    if [[ -z $venv_dir ]]; then
        echo >&2 "arg: <venv-dir>"
        return 1
    fi

    # inject into shell history for ctrl-r
    local cmd="source \"$(realpath "$venv_dir")/bin/activate\" # venvu"
    if [[ -n $ZSH_VERSION ]]; then
        print -S "$cmd"
    elif [[ -n $BASH_VERSION ]]; then
        history -s "$cmd"
    fi

    eval "$cmd"
}

get_git_branch() {
    local branch=$(git symbolic-ref --short HEAD 2>/dev/null)
    if [[ -n $branch ]]; then
        echo "(br:$branch) "
    fi
}

get_git_stash_count() {
    local num_stashes=$(git rev-list --walk-reflogs --count refs/stash 2>/dev/null)
    if [[ -n $num_stashes ]]; then
        echo "(st:$num_stashes) "
    fi
}

get_last_exit_status() {
    local last_exit_status=$?
    if [[ $last_exit_status -ne 0 ]]; then
        echo "(e:$last_exit_status) "
    fi
}

get_python_venv() {
    if [[ -n $VIRTUAL_ENV ]]; then
        echo "(venv:$(basename $VIRTUAL_ENV)) "
    fi
}

if [[ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]]; then
    source "$HOME/.nix-profile/etc/profile.d/nix.sh"
fi

# for managing node+npm
if command -v fnm >/dev/null; then
    eval "$(fnm env)"
fi

# for managing python versions
if command -v pyenv >/dev/null; then
    eval "$(pyenv init -)"
fi

# vim: set ts=8 sts=4 sw=4 et ft=bash:
