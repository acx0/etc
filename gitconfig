; references:
; 	`man gitglossary`
; 	`man gitrevisions`
; 	`man git-config`
[user]
	name = Sam Lidder
	email = sam.lidder@gmail.com
[color]
	ui = true
[color "diff"]
	; see 'git help config' /color.diff.<slot> for more options
	meta = cyan
	frag = magenta bold
[color "status"]
	added = green
	changed = yellow
	untracked = red
[core]
	editor = vim
[commit]
	; show diff preview during commit message edits (i.e. `commit`, `rebase --continue`)
	verbose = true
[diff]
	; see: How Different Are Different diff Algorithms in Git?
	;   https://link.springer.com/article/10.1007/s10664-019-09772-z
	; options:
	;   myers (default)
	;   minimal (tries to produce minimal diff, extends `myers`)
	;   patience
	;   histogram (since 1.7.7, extends `patience`)
	algorithm = histogram
[pull]
	ff = only		; fast-forward only
	; rebase = true		; false=merge (default), true=rebase
[merge]
	conflictstyle = diff3
	tool = vimdiff
	prompt = true
[stash]
	showPatch = true
[rerere]
	enabled = true
[push]
	default = simple
[fetch]
	prune = true
[log]
	decorate = full
[status]
	submoduleSummary = true
[alias]
	amm = amend-ng
	ap = add -p
	br = branch -vv
	ci = commit
	cia = commit --amend
	ciad = commit --amend --date=now
	co = checkout
	conflicted = !vim +Conflicted
	cond = conflicted
	conflicts = grep --name-only --full-name '^<<<<<<< '
	cons = conflicts
	cp = cherry-pick
	dfc = diff --cached
	dffc = diff --color-words --cached
	df = diff
	dff = diff --color-words
	; only force push if we've seen the refs we're overwriting
	; i.e. avoid race-condition of force-pushing over commit(s) we haven't seen
	; note: see `man git-push` about how this heuristic can fail (background process
	; periodically `git fetch`-ing)
	fpush = push --force-with-lease
	lf = log -p --stat
	lg = log -p --color-words
	lgg = log --oneline --graph
	loga = log --pretty=fuller
	mt = mergetool
	rb = rebase
	rbc = rebase --continue
	rba = rebase --abort
	rbs = rebase --skip
	re = grep --extended-regexp --line-number
	rl = reflog
	rs = restore
	rss = restore --staged
	;rp = remote prune
	rt = remote
	;ru = remote update
	sb = show-branch
	sm = submodule
	st = status
	sts = status --short

# windows config example
#[core]
#	editor = "'C:\\Program Files (x86)\\vim\\vim74\\gvim.exe'"
#[merge]
#	tool = gvimdiff
#[mergetool "gvimdiff"]
#	path = "C:\\Program Files (x86)\\vim\\vim74\\gvim.exe"

; vim: set ts=8 sts=0 sw=8 noet ft=gitconfig :
